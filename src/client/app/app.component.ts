/*
 * Copyright (c) [2018] [Willamette University]
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Author: Michael Spalti
 */

import {
  AfterViewInit,
  ChangeDetectionStrategy, Component, ElementRef, Inject, OnDestroy, OnInit, PLATFORM_ID,
  ViewChild
} from '@angular/core';
import {NavigationStart, Router} from '@angular/router';
import {
  DOCUMENT, isPlatformBrowser, Location, LocationStrategy, PathLocationStrategy
} from '@angular/common';
import {MatSidenav} from '@angular/material';
import {MenuInteractionService} from './core/services/menu/menu-interaction.service';
import {Store} from '@ngrx/store';
import * as fromRoot from './core/ngrx/reducers/index';
import {MediaChange, ObservableMedia} from '@angular/flex-layout';
import {Subscription} from 'rxjs';
import {SetTimeoutService} from './core/services/timers/timeout.service';
import {LoggerService} from './core/logger/logger.service';
import {ScrollReadyService} from './core/services/observable/scroll-ready.service';

/**
 * This component includes the md-sidenav-container, md-sidenav
 * and the router outlet.
 *
 * The component is responsible for setting the scrollTop value
 * of the scrollable element generated by the md-sidenav-container
 * directive. This assures that list views and item views (which are
 * siblings of the router-outlet inside md-sidenav-container) are
 * positioned correctly on load.
 */
@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styleUrls: ['app.component.css'],
  providers: [Location, {provide: LocationStrategy, useClass: PathLocationStrategy}],
  changeDetection: ChangeDetectionStrategy.Default
})
export class AppComponent implements AfterViewInit, OnInit, OnDestroy {

  watcher: Subscription;
  homeUrl = 'http://libmedia.willamette.edu/academiccommons';
  secondaryUrl = 'http://library.willamette.edu';
  tertiaryUrl = 'http://www.willamette.edu';
  @ViewChild('sidenav') sideNavigate: MatSidenav;
  @ViewChild('appcontent') appContent: ElementRef;
  state = '';

  constructor(private store: Store<fromRoot.State>,
              private menuService: MenuInteractionService,
              public media: ObservableMedia,
              private router: Router,
              @Inject(DOCUMENT) private document,
              private timeoutService: SetTimeoutService,
              private logger: LoggerService,
              private scrollReady: ScrollReadyService,
              @Inject(PLATFORM_ID) private platform: Object) {

    this.watcher = new Subscription();
    const mediaWatcher = media.asObservable()
      .subscribe((change: MediaChange) => {
        this.state = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';
      });
    this.watcher.add(mediaWatcher);

  }

  goToHome(): void {
    this.document.location.href = this.homeUrl;
  }

  goToSecondary(): void {
    this.document.location.href = this.secondaryUrl;
  }

  goToTertiary(): void {
    this.document.location.href = this.tertiaryUrl;
  }

  ngOnInit() {

    const openWatcher = this.menuService.openMenu$.subscribe(open => {
      this.sideNavigate.open().catch((err) => {
        console.log(err);
      });
    });
    this.watcher.add(openWatcher);
  }

  ngAfterViewInit() {

    // Anticipating angular universal.
    if (isPlatformBrowser(this.platform)) {
      const scrollable = this.document.querySelector('.mat-drawer-content');
      // The scrollReady service knows when ListContainer has received data.
      // We subscribe to it here, and use the position to set the scrollTop value.
      this.scrollReady.subscribe((pos) => {
        this.timeoutService.setTimeout(0, () => {
          if (this.router.url.match(/\/commons\/collection/)) {
            scrollable.scrollTop = pos;
          }
        });
      });

      // This gets the current scroll position when leaving the collection component
      // and sets the value in the scrollReady service. (see above)
      this.router.events.subscribe((event: any) => {
        if (event instanceof NavigationStart) {
          if (!event.url.match(/\/commons\/collection/)) {
            // Get absolute value fo the bounding rectangle for #app-content.
            const top = Math.abs(this.appContent.nativeElement.getBoundingClientRect().top);
            // this.logger.info('Bounding rectangle: ' + top);
            this.scrollReady.setPosition(top);
            scrollable.scrollTop = 0;
          }
        }
      });
    }
  }

  ngOnDestroy() {
    if (this.watcher) {
      this.watcher.unsubscribe();
    }
    if (this.timeoutService) {
      this.timeoutService.clearTimeout();
    }
  }
}
